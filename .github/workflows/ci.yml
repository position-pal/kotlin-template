name: build-and-test

on:
  push:
    tags:
      - '*'
    branches-ignore: # Pushes on these branches won't start a build
      - 'autodelivery**'
      - 'bump-**'
      - 'renovate/**'
    paths-ignore: # Pushes that change only these file won't start the workflow
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.gitignore'
      - '.mergify.yml'
      - 'renovate.json'
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        jvm-version: [ 11, 17, 21 ]
    runs-on: ${{ matrix.os }}-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Set up JDK ${{ matrix.jvm-version }}
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.jvm-version }}

      - name: Grant execute permission for gradlew on Unix systems
        if: matrix.os != 'windows'
        run: chmod +x gradlew

      - name: Assemble
        run: ./gradlew assemble

      - name: Build
        run: ./gradlew build

      - name: Test
        run: ./gradlew test

      - name: Check
        run: ./gradlew check

  release-and-delivery:
    permissions:
      packages: write
    concurrency:
      group: release-and-delivery-${{ github.event.number || github.ref }}
    needs:
      - build
    runs-on: ubuntu-latest
    outputs:
      release-status: ${{ env.release_status }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Get All Tags
        run: git fetch --tags -f

      - name: Find the version of Node from package.json
        id: node-version
        run: echo "version=$(jq -r .engines.node package.json)" >> $GITHUB_OUTPUT

      - name: Install Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ steps.node-version.outputs.version }}

      - name: Release
        run: |
          npm install
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  success:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Final Check
        run: echo "All builds passed successfully!"